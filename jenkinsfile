pipeline{
    agent any
    
    environment {
		DOCKERHUB_CREDENTIALS = credentials('docker-token2')
	}
    stages{
        stage("Git checkout"){
            steps{
                git branch: 'main', url: 'https://github.com/debiashapatra/DemoprojectPipeline.git'
            }
        }
        stage("UNIT testing"){
            steps{
                bat 'mvn test'
            }
        }
        stage("Integration test"){
            steps{
                bat 'mvn verify -DskipUnitTests'
            }
        }
        stage("Building Jar"){
            steps{
                bat 'mvn clean install'
            }
        }
        stage("Sonar Analysiss"){
            steps{
                script{
             withSonarQubeEnv(credentialsId: 'jenkins-sonar-key-actual') {
                bat 'mvn clean package sonar:sonar'
                }
            }
   
            }
       
        }
        stage("Quality gate status"){
                steps{
                    
                    script{
                        
                        waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonar-key-actual'
                    }
                }
            }
            
        stage("file uploaded to nexus") {
            steps{
                script{
                    def pom_version = readMavenPom file: 'pom.xml'

                    def nexusRepo = pom_version.version.endsWith("SNAPSHOT") ? "demosnapshotrepo" : "demo-release"
                
                    nexusArtifactUploader artifacts:
                     [[
                        artifactId: 'springboot',
                        classifier: '', 
                        file: 'target/Uber.jar', 
                        type: 'jar'
                    ]], 
                    credentialsId: 'nexusint',
                    groupId: 'com.example', 
                    nexusUrl: '192.168.56.1:8081', 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: nexusRepo, 
                    version: "${pom_version.version}"
                }
            }
        }  
	

        stage("Docker build image"){
            steps{
                script{

                    bat 'docker image build -t democont .'
                    bat 'docker image tag democont morphin9/democont:latest'

                }
            }
        } 

		stage('Docker Login') {

			steps {
                script{
  
      	withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
        	bat "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
            bat 'docker push morphin9/democont'
            bat 'docker push morphin9/democont:latest'
        
			}}
		}
        }

	}
 }
        
